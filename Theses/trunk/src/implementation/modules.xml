<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Module</title>
	<para>
		In diesem Kapitel wird die Funktionalität der Module beschrieben.
		Zunächst wird hierzu der Weg beschrieben wie man ein Modul
		mittels eines MSIM-Files beschreibt. Anschließend wird auf
		verschiedene Aspekte zur Implementierung eines Moduls eingegangen.
	</para>
	<section>
		<title>Funktionsweise</title>
		<para>
			Die Grundlage eines Modules bildet eine Datei, welche
			das Modul beschreibt. Im Folgenden wird diese Datei auch
			"MSIM-Datei" oder "MSIM-File" genannt.
		</para>
		<para>
			Eine solche Datei beschreibt das Modul indem sie jede einzelne
			Komponente des Moduls als Instanz aufführt und darin klargestellt
			wird wie diese Instanzen sich zueinander verhalten.
		</para>
		<para>
			Der Simulator ist dafür zuständig eine solche Datei zu analysieren
			und entsprechend der Inhalte die Instanzen der Objekte zu erstellen.
		</para>
		<para>
			Anschließend ist der Simulator bereit das Modul auszuführen.
		</para>
	</section>
	<xi:include href="modules/msim.xml" />
	<section>
		<title>Implementierung eines Moduls</title>
		<para>
			In diesem Abschnitt wird beschrieben wie ein Modul
			implementiert werden kann. Dabei werden zunächst
			die Grundlagen erläutert, wie zum Beispiel ein Modul
			in VIDIS geladen werden kann. Anschließend wird darauf
			eingegangen welche Java Archive benötigt werden.
			Schlussendlich wird beschrieben, wie eine Funktionalität implementiert
			werden sollte und wie man mittels Java Annotations
			erreicht, dass der Simulator Felder beziehungsweise Methoden
			überwacht.
		</para>
		<section xml:id="implementation.modules.dropinfolder">
			<title>DropIn Folder</title>
			<para>
				Das DropIn Folder kann dazu verwendet werden, fertig
				implementierte und in ein Java Archiv (JAR) gepackte
				Module in den Simulator zu laden. Dazu wird
				der Ordner <quote>data/dropIn</quote> überwacht. Jedes
				Archiv, das dort abgelegt wird, wird vom Simulator
				im <quote>Laden</quote>-Menü angezeigt.
			</para>
			<warning>
				<para>
					Es ist nicht möglich einen Ordner abzulegen.
					Ausschließlich JAR Archive werden durchsucht und
					mittels dem VidisClassLoader geladen.
				</para>
			</warning>
		</section>
		<section>
			<title>Implementieren eines Moduls</title>
			<para>
				Zum Implementieren eines Moduls wird die Bibliothek 
				<quote>mod_api.jar</quote> in Form eines JAR Archivs
				benötigt.
			</para>
			<note>
				<para>
					Es wird empfohlen in Eclipse auch den Quellcode
					(<quote>mod_api-src.jar</quote>) in den Classpath
					zu integrieren, da dadurch die Javadoc Dokumentation
					zu jeder Klasse und Funktion angezeigt wird. Dies 
					erleichtert die Implementierung erheblich.
				</para>
			</note>
			<para>
				Wie bereits in Abschnitt <xref linkend="design.module.modulkomponenten" />
				beschrieben, gibt es die Komponenten Module Node,
				Module Link und Module Packet. Jede dieser Komponenten
				besitzt eine abstrakte Klasse, welche als Grundlage
				zur Implementierung dient. Im Folgenden werden die 
				abstrakten Klassen aufgelistet.
			</para>
			<variablelist>
				<varlistentry>
					<term>Module Node</term>
					<listitem>
						<para>
							Diese Komponente wurde in der abstrakten
							Klasse <classname>AUserNode</classname>
							realisiert.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Module Link</term>
					<listitem>
						<para>
							Die abstrakte Klasse <classname>AUserLink</classname>
							implementiert die von <quote>Module Link</quote> 
							definierte Funktionalität.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Module Packet</term>
					<listitem>
						<para>
							Die Funktionalität der letzten Komponente, namentlich Module Packet, wurde
							in der abstrakten Klasse <classname>AUserPacket</classname>
							implementiert.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Will man eine entsprechende Komponente implementieren,
				muss man eine Klasse erstellen und diese von der
				gewünschten abstrakten Klasse ableiten. Im folgenden wird
				dieser Vorgang beschrieben.
			</para>
			<variablelist>
				<varlistentry>
					<term>Implementierung eines Module Node</term>
					<listitem>
						<programlisting>
							<![CDATA[
								package vidis.modules.test;
								
								import vidis.data.AUserNode;
								import vidis.data.mod.IUserPacket;
								
								public class TestNode extends AUserNode {
									@Override
									public void init() {
										// TODO Auto-generated method stub
										
									}
									@Override
									public void receive(IUserPacket arg0) {
										// TODO Auto-generated method stub
										
									}
									@Override
									public void execute() {
										// TODO Auto-generated method stub
										
									}
								}
							]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Implementierung eines Module Link</term>
					<listitem>
						<programlisting>
							<![CDATA[
								package vidis.modules.test;
								
								import vidis.data.AUserLink;
								
								public class TestLink extends AUserLink {
									@Override
									public void execute() {
										// TODO Auto-generated method stub
									}
								}
							]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Implementierung eines Module Packet</term>
					<listitem>
						<programlisting>
							<![CDATA[
								package vidis.modules.test;
								
								import vidis.data.AUserPacket;
								
								public class TestPacket extends AUserPacket {
								}
							]]>
						</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section xml:id="design.modules.variableannotations">
			<title>Variablen mittels Annotations</title>
			<para>
				TODO
			</para>
			<para>
				Hier wird beschrieben wie die Annotations
				auszuschauen haben damit der Simulator
				sie als Variablen erkennt und behandelt.
			</para>
		</section>
	</section>
</section>