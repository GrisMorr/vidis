<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Simulator</title>
	<para>
		Im folgenden Abschnitt definieren und beschreiben wir den Simulator.
	</para>
	<section>
		<title>Definitionen</title>
		<para>
			Folgende Definitionen werden im Simulator verwendet.
		</para>
		<section>
			<title>Komponente</title>
			<para>
				Wir bezeichnen eine Komponente als eine ausführbare, vom Benutzer implementierte Klasse.
			</para>
			<para>
				Es wird unter folgenden Komponententypen unterschieden:
			</para>
			<section>
				<title>Node</title>
				<para>
					Ein Node, oder auch "Knoten", ist in der Terminologie gleichzusetzen mit einem Peer aus einem Verteilten Systemen.
				</para>
				<para>
					In einem Netzwerk aus Computern wäre ein Knoten einer dieser Rechner.
				</para>
				<para>
					Ein Knoten kann sich über Links mit anderen Knoten verbinden und so mit diesen über Pakete kommunizieren.
				</para>
				<para>
					Mehr Informationen zur Funktionalität eines Knoten findet man im Abschnitt <!-- xlink:to-->"Implementation > Modul > Node"<!-- /xlink:to -->.
				</para>
			</section>
			<section>
				<title>Link</title>
				<para>
					Ein Link, oder auch "Verbindung", ist in der Terminologie gleichzusetzen mit einer aktiven Verbindung zwischen zwei Peers aus einem Verteilten System.
				</para>
				<para>
					Mehr Informationen zur Funktionalität eines Knoten findet man im Abschnitt <!-- xlink:to-->"Implementation > Modul > Link"<!-- /xlink:to -->.
				</para>
			</section>
			<section>
				<title>Packet</title>
				<para>
					Ein Packet, oder auch "Paket", ist in der Terminologie gleichzusetzen mit einem Datenpaket das über eine aktive Verbindung zwischen zwei Peers geschickt wird.
				</para>
				<para>
					Mehr Informationen zur Funktionalität eines Knoten findet man im Abschnitt <!-- xlink:to-->"Implementation > Modul > Paket"<!-- /xlink:to -->.
				</para>
			</section>
		</section>
		<section>
			<title>Modul</title>
			<para>Ein Modul ist eine Menge aus Komponenten</para>
		</section>
		<section>
			<title>Steps</title>
			<para>
				Ein "Step", oder auch "Schritt" ist die kleinste Zeiteinheit im Simulator.
			</para>
		</section>
	</section>
	<section>
		<title>Modul einlesen</title>
		<para>
			In diesem Kapitel wird die Implementierung der
			Funktionalität des Modul laden beschrieben.
		</para>
		<para>
			Der Simulator versucht beim Laden einer MSIM-Datei,
			einen InputStream zu dieser Datei zu öffnen und übergibt
			diesen der Klasse <classname>XMLModuleReader</classname>.
		</para>
		<para>
			Die Klasse <classname>XMLModuleReader</classname> implementiert
			das Interface <interfacename>CommonDomParser</interfacename>.
			Entsprechend kommt in VIDIS ein DOM XML-Parser zum Einsatz.
			Nachdem die Klasse <classname>XMLModuleReader</classname> das 
			XML Dokument analysiert hat, werden die gewonnenen Daten als
			<classname>DocumentData</classname> an den Simulator zurückgegeben.
		</para>
		<para>
			Der Simulator übernimmt anschließend die gewonnenen Daten
			aus der <classname>DocumentData</classname> Klasse in die
			interne Klassenstruktur. An dieser Stelle werden alle relevanten
			Instanzen der Modul Objekte erzeugt und anschließend
			initialisiert. Folgende Arbeitsschritte werden durchlaufen:
			<variablelist>
				<varlistentry>
					<term>Player stoppen</term>
					<listitem>
						<para>
							Sollte vorher ein anderes Modul geladen worden sein,
							was in der Regel der Fall ist, muss der Player
							gestoppt werden. Dies verhindert unvorhersehbares Verhalten
							beim nächsten Schritt.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Alte Modul Objekt Instanzen löschen</term>
					<listitem>
						<para>
							In diesem Schritt werden nun nicht mehr benötigte
							Objekt Instanzen gelöscht. Dazu wird die Funktion
							<methodsynopsis>
								<modifier>public</modifier>
								<type>void</type>
								<methodname>kill</methodname>
								<void/>
							</methodsynopsis>
							definiert durch das Interface <interfacename>IComponent</interfacename>
							aufgerufen.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Nodes initialisieren</term>
					<listitem>
						<para>
							Alle Node Instanzen werden in diesem Schritt initialisiert,
							Variablen geladen und anschließend als Simulatorkomponente
							beim Simulator registriert.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Links initialisieren</term>
					<listitem>
						<para>
							Alle Link Instanzen werden in diesem Schritt initialisiert,
							Variablen geladen.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Nodes über Links verbinden</term>
					<listitem>
						<para>
							Im letzten Schritt werden die Nodes über
							die Links miteinander verbunden. Anschließend
							wird der Link als Simulatorkomponente beim Simulator 
							registriert.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
	</section>
	<section>
		<title>Arbeitsweise</title>
		<para>
			Der Simulator arbeitet abschnittsweise. Ein Abschnitt stellt einen vollständigen Simulationsschritt dar.
		</para>
		<section>
			<title>Grundlegende Arbeitsweise</title>
			<para>
				Zunächst werden falls nötig alle Variablen initialisiert.
			</para>
			<para>
				Anschließend werden simulatorinterne Operationen ausgeführt.
				Im Falle eines Links wäre dies der Transport eines Paketes.
			</para>
			<para>
				Am Schluss werden nochmals alle Variablen auf Änderungen
				überprüft. Gegebenenfalls wird die Visualisierungskomponente
				über die Änderungen informiert.
			</para>
		</section>
		<section>
			<title>Detaillierte Beschreibung der Ablaufreihenfolge</title>
			<para>
				<itemizedlist>
				<listitem>
					<para>
						Node:
						<itemizedlist>
							<listitem>
								<para>Wenn Simulationsschritt #1: module.init();</para>
							</listitem>
							<listitem>
								<para>processPacketQueue();</para>
							</listitem>
							<listitem>
								<para>propagateVariableChanges();</para>
							</listitem>
							<listitem>
								<para>Wenn nicht schlafend: module.execute();</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>
						Link:
						<itemizedlist>
							<listitem>
								<para>processQueue();</para>
							</listitem>
							<listitem>
								<para>propagateVariableChanges();</para>
							</listitem>
							<listitem>
								<para>Wenn nicht schlafend: module.execute();</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>
						Paket:
						<itemizedlist>
							<listitem>
								<para>propagateVariableChanges();</para>
							</listitem>
							<listitem>
								<para>execute(); (leere final Methode)</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
			</itemizedlist>
			</para>
		</section>
	</section>
</section>