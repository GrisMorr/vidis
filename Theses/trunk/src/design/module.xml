<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Modul</title>
	<para>
		Ein Modul soll eine Implementierung eines
		verteilten
		Algorithmus sein. Einhergehend mit der
		Definition ging die Beobachtung,
		dass alle Verteilten
		Systemen mit Hilfe
		von drei Komponenten dargestellt
		werden können. So gibt
		es in den meisten Anwendungen im Bereich von Verteilten Systemen
		Peers, welche über Verbindungen untereinander miteinander
		kommunizieren. Somit bietet sich folgender naiver Ansatz
		für ein Grundgerüst an um ein Verteiltes System zu simulieren.
	</para>
	<para>
		Wie bereits in <xref linkend="design.simulator.simulatorkomponenten" /> unterscheidet man drei Komponenten:
		<itemizedlist>
			<listitem>
				<para>Knoten</para>
			</listitem>
			<listitem>
				<para>Verbindung</para>
			</listitem>
			<listitem>
				<para>Paket</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		Diese drei Komponenten können in dieser Form direkt
		als Modul Komponenten übernommen werden. Jede dieser
		Komponenten besitzt dabei eine simulatorinterne Repräsentation.
	</para>
	<section>
		<title>Modul Komponenten</title>
		<variablelist>
			<varlistentry>
				<term>Module Node</term>
				<listitem>
					<variablelist>
						<varlistentry>
							<term>Beschreibung</term>
							<listitem>
								<para>
									Ein Module Node besitzt die von einem Benutzer implementierte
									Funktionalität eines Peers und kann mittels eines Simulator Node (vgl. <xref linkend="design.simulator.simulatornode" />)
									in den Simulator eingespeist werden. Gewissermaßen ist dies
									gleichzusetzen mit einem Peer in einem Verteilten System und ist
									damit die modulare Repräsentation eines Knotens (vgl. <xref linkend="design.simulator.knoten" />).
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Voraussetzungen</term>
							<listitem>
								<para>
									Ein Node soll auf die Verbindungen mit anderen Nodes
									zugreifen können. Seine Funktionalität, das heißt, der Code
									der bei jedem Simulationsschritt ausgeführt wird, soll
									frei programmierbar sein. Weiters soll ein Node auf
									den Erhalt von Paketen reagieren können.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Module Packet</term>
				<listitem>
					<variablelist>
						<varlistentry>
							<term>Beschreibung</term>
							<listitem>
								<para>
									Ein Module Packet ist die von einem Benutzer implementierte
									Dateneinheit zur Datenübertragung von einem Module Node zu einem
									anderen Module Node. Ein Module Packet wird mittels eines
									Simulator Packets (vgl. <xref linkend="design.simulator.simulatorpacket" />) im Simulator
									registriert und repräsentiert ein Paket (vgl. <xref linkend="design.simulator.paket" />)
									im Kontext eines Moduls.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Voraussetzungen</term>
							<listitem>
								<para>
									Ein Packet soll beliebige Daten abspeichern und transportieren
									können. Außerdem soll ein Packet den Absender und den Weg den
									es genommen hat kennen, um die Arbeit damit zu erleichtern.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Module Link</term>
				<listitem>
					<variablelist>
						<varlistentry>
							<term>Beschreibung</term>
							<listitem>
								<para>
									Ein Module Link ist die Repräsentation einer Verbindung
									(vgl. <xref linkend="design.simulator.verbindung" />)
									und wird mittels eines Simulator Link (vgl. <xref linkend="design.simulator.simulatorlink" />) vom Simulator ausgeführt.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Voraussetzungen</term>
							<listitem>
								<para>
									Ein Link soll zwei Nodes bidirektional verbinden. Dabei
									soll es möglich sein die Länge des Links anzugeben (Delay).
									Es soll möglich sein die Paketübertragung zu stören um auch
									instabile Netzwerke beziehungsweise Netzwerkstörungen simulieren
									zu können.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section>
		<title>Interfaces</title>
		<para>
			Im folgenden werden die Interfaces der Komponenten Module Node,
			Module Packet und Module Link definiert.
		</para>
		<section xml:id="design.module.node">
			<title>Module Node</title>
			<para>
				Ein Module Node ist die Entität eines Peers. Sein Verhalten ist
				deterministisch vorhersehbar. Dieses Verhalten soll in
				dieser Klasse kodiert und bei der Simulation ausgeführt werden.
			</para>
			<para>
				Ein Node definiert die für den implementierenden Anwender relevanten
				Methoden.
			</para>
			<itemizedlist>
				<title>Module Node Methoden</title>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>send</methodname>
						<methodparam>
							<type>IUserPacket</type><parameter>packet</parameter>
						</methodparam>
						<methodparam>
							<type>IUserLink</type>
							<parameter>link</parameter>
						</methodparam>
						<methodparam>
							<type>long</type>
							<parameter>processingDelay</parameter>
						</methodparam>
						<methodparam><type>long</type><parameter>delay</parameter></methodparam>
					</methodsynopsis>
					<para>
			      		Diese Funktion wird dazu verwendet um ein Paket an einen 
				      	benachbarten Knoten mit einer bestimmten Verzögerung (Simulationsschritte)
				      	zu senden.
					</para>
					<note>
				      	<para>
				      		Von dieser Funktion gibt es zwei Abwandlungen:
				      		<itemizedlist>
				      			<listitem>
				      				<para>
				      					Ohne dem Parameter <parameter>processingDelay</parameter> wird
				      					die triviale Bearbeitungszeit von <quote>0</quote> Simulationsschritte
				      					angenommen.
				      				</para>
				      			</listitem>
				      			<listitem>
				      				<para>
				      					Ohne dem Parameter <parameter>processingDelay</parameter> und
				      					ohne dem Parameter <parameter>link</parameter> wird
				      					die triviale Bearbeitungszeit von <quote>0</quote> Simulationsschritte
				      					angenommen und das Paket über alle verbundenen Links zu allen Nachbarknoten
				      					geschickt.
				      				</para>
				      			</listitem>
				      		</itemizedlist>
				      	</para>
				      	<para>
				      		Diese Funktionen wurden als Hilfsfunktionen eingebaut und dienen
				      		zum Broadcast von Nachrichten. Dadurch wird die Implementierung
				      		von manchen Algorithmen erleichtert.
				      	</para>
					</note>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>connect</methodname>
						<methodparam>
							<type>IUserNode</type>
							<parameter>n</parameter>
						</methodparam>
						<methodparam>
							<type>Class&lt;? extends IUserLink&gt;</type><parameter>lclazz</parameter>
						</methodparam>
			        	<methodparam><type>long</type><parameter>delay</parameter></methodparam>
					</methodsynopsis>
					<para>
				      	Mit dieser Funktion wirdeine Verbindung zu einem
				      	anderen Knoten aufgebaut. Sollte bereits eine Verbindung bestehen
				      	hat ein Aufruf dieser Funktion keinerlei Effekt.
			      	</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>disconnect</methodname>
						<methodparam>
							<type>IUserNode</type>
							<parameter>n</parameter>
						</methodparam>
					</methodsynopsis>
					<para>
						Diese Funktion wird dazu verwendet um eine bestehende Verbindung
						zu einem anderen Knoten zu trennen. Sollte keine Verbindung zum
						anderen Knoten bestehen hat ein Aufruf dieser Funktion keinerlei Effekt.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>receive</methodname>
						<methodparam>
							<type>IUserPacket</type>
							<parameter>packet</parameter>
						</methodparam>
					</methodsynopsis>
					<para>
						Diese Funktion wird dazu verwendet um Pakete zu empfangen.
						Jedes Paket, das diese Node empfängt, wird über diese Funktion
						an den implementierenden Anwender weitergeleitet damit dieser
						angemessen darauf reagieren kann. Sie bildet, zusammen mit der Funktion "execute",
						die Hauptfunktionalität eines Moduls.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>init</methodname>
						<void/>
					</methodsynopsis>
					<para>
						Diese Funktion wird beim Start einer Simulation 
						ausgeführt. In dieser Funktion können Initialisierungen
						für Variablen und dergleichen implementiert werden.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>execute</methodname>
						<void/>
					</methodsynopsis>
					<para>
						Diese Funktion wird bei jedem Simulationsschritt
						einmal ausgeführt. Sie bildet, zusammen mit der Funktion "receive",
						die Hauptfunktionalität eines Moduls.
					</para>
				</listitem>
			</itemizedlist>
			<!--
			<xi:include href="module/javadocref/vidis-data-mod-IUserNode.xml"/>
			 -->
		</section>
		<section xml:id="design.module.link">
			<title>Module Link</title>
			<para>
				Ein Module Link soll zwei Nodes bidirektional verbinden. Dabei
				soll es möglich sein die Länge des Links anzugeben (Delay).
				Es soll möglich sein die Paketübertragung zu stören um auch
				instabile Netzwerke beziehungsweise Netzwerkstörungen simulieren
				zu können.
			</para>
			<para>
				Er definitiert folgende, für den implementierenden Anwender,
				wichtigen Methoden.
			</para>
			<itemizedlist>
				<title>Module Link Methoden</title>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>execute</methodname>
						<void/>
					</methodsynopsis>
					<para>
						Diese Funktion wird mit jedem Simulationsschritt
						ausgeführt.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<modifier>final</modifier>
						<type>void</type>
						<methodname>dropPacketOnLink</methodname>
						<methodparam><type>IUserPacket</type><parameter>packet</parameter></methodparam>
					</methodsynopsis>
					<para>
						Mit Hilfe dieser Funktion kann man ein
						Paket aus der Liste der zu übertragenden
						Pakete entfernt werden. So kann man
						Paketverluste ("Packet loss") simulieren.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<modifier>final</modifier>
						<type>void</type>
						<methodname>dropPacketsOnLink</methodname>
						<void/>
					</methodsynopsis>
					<para>
						Diese Funktion entfernt alle Pakete,
						die derzeit übertragen werden, von diesem
						Link. So kann man Paketverluste ("Packet loss")
						simulieren.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>void</type>
						<methodname>disconnect</methodname>
						<void/>
					</methodsynopsis>
					<para>
						Diese Funktion bewirkt, dass diese Verbindung
						zwischen zwei Knoten gekappt wird.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>long</type>
						<methodname>getDelay</methodname>
						<void/>
					</methodsynopsis>
					<para>
						Mit Hilfe dieser Funktion erhält man
						die Verzögerung (Delay) dieses Links.
						Die Verzögerung ist die Länge des Links.
						Ein Paket braucht zur Übertragung von
						einem Node zum anderen genau so viele 
						Simulationsschritte.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>IUserNode</type>
						<methodname>getOtherNode</methodname>
						<methodparam><type>IUserNode</type><parameter>me</parameter></methodparam>
					</methodsynopsis>
					<para>
						Diese Funktion kann dazu verwendet werden, um
						den Nachbarknoten mit dem man über diesen Link
						verbunden ist, herauszufinden.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section xml:id="design.module.packet">
			<title>Module Packet</title>
			<para>
				Ein Module Packet wird durch folgende wichtigen Methoden definiert.
			</para>
			<itemizedlist>
				<title>Module Packet Methoden</title>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>IUserLink</type>
						<methodname>getLinkToSource</methodname>
						<void/>
					</methodsynopsis>
					<para>
					Diese Funktion gibt den Link zum Absender des
						Pakets zurück.
					</para>
				</listitem>
				<listitem>
					<methodsynopsis language="java">
						<modifier>public</modifier>
						<type>IUserNode</type>
						<methodname>getSource</methodname>
						<void/>
					</methodsynopsis>
					<para>
					Diese Funktion gibt den Node des Absenders 
						zurück.
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
</section>