<?xml version="1.0" encoding="UTF-8"?>
<section
	xmlns="http://docbook.org/ns/docbook">
	<title>Darstellung</title>
	<para></para>
	<section>
		<title>Graphische Benutzeroberfläche</title>
		<para>	
			Die Oberfläche muss einfach zu bedienen sein und sich optimal in die 3D Umgebung eingliedern. 
			Existierende APIs wie <trademark>Java</trademark> Swing oder Eclipse RCP wurden ausgeschlossen. Diese gliedern sich nicht in den OpenGL Kontext
			ein, sondern umschließen ihn. Es gibt inzwischen einige Projekte, die es ermöglichen Swing Fenster innerhalb des 3D Kontextes als Texturen zu
			verwenden. Diese Funktionalität benötigt die Verbesserungen der Image I/O von <trademark>Java</trademark> 6, die Ziel Plattform ist aber 
			<trademark>Java</trademark> 5 <xref linkend="web_blogmustangimageio" />.  
		</para>
		<para>Es wurde eine einfache 3D API entworfen, die genau die benötigten Bedürfnisse erfüllt. Sie besteht prinzipiell aus einem Container und einigen Widgets, um Benutzerineraktion zu ermöglichen.</para>
		<itemizedlist>
			<para>Eine kurze Übersicht der GUI API:</para>
			<listitem>
				<para>BasicGuiContainer</para>
				<para></para>
			</listitem>	
			<listitem>
				<para>ScrollContainer</para>
				<para></para>
			</listitem>	
			<listitem>
				<para>Button</para>
				<para></para>
			</listitem>	
			<listitem>
				<para>CheckBox</para>
				<para></para>
			</listitem>	
			<listitem>
				<para>Label</para>
				<para></para>
			</listitem>	
		</itemizedlist>
		<figure id="gui_klassendiagramm">
			<title>Vereinfachtes Klassendiagramm GUI API</title>
			<imageobject>
				<imagedata width="350pt" align="center" fileref="figures/gui_klassendiagramm2.svg" /> 
			</imageobject>
		</figure>
		<para>
			Der BasicGuiContainer ist die wichtigste Klasse. Durch ein Composite Pattern kann er beliebig viele weitere GuiContainer enthalten. Diese
			werden durch das assozierte Layout ausgerichtet. Außerdem reicht er Mausevents an die betroffenen, darunterliegenden Container weiter.
		</para>
	</section>	
	<section>
		<title>Visualisierung</title>
		<para>
			Das simulierte, verteilte System muss anschaulich dargestellt werden. Prinzipell müssen die folgenden Elemente gezeichnet werden:
		</para>
		<itemizedlist>
			<listitem>
				<para>Node</para>
			</listitem>
			<listitem>
				<para>Link</para>
			</listitem>
			<listitem>
				<para>Paket</para>
			</listitem>
		</itemizedlist>
		<para>
			Die einfachste Darstellung wäre eine zweidimensionale Ebene auf der die  Nodes als Punkte gezeichnet werden.
			Diese werden mit Linien, um die Links darzustellen, verbunden. Außerdem braucht man noch Punkte, um die Pakete darzustellen.
			Diese Punkte müssen sich natürlich von den Nodepunkten unterscheiden und können sich auf den Links (also den Linien) bewegen.
		</para>
		<para>
			Es sollte aber eine weitaus ansprechendere Darstellung geschaffen werden.
		</para>
		<para>
			Der Überschaubarkeit halber wird diese zweidimensionale Ebene beibehalten, aber nur als Grundfläche in einem dreidimensionalen Raum.
			Die Nodes werden zu Kugeln, die Links zu transparenten, nach oben gebogenen Rohren, die sich wölben wenn sie ein Paket transportieren.
			Die Pakete werden auch zu Kugeln, die im Inneren der Links zu sehen sind. Dadurch wird die ganze Simulation plastischer vermittelt.
		</para>
			
	</section>
</section>
