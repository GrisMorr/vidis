<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" 
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:math="http://www.w3.org/1998/Math/MathML">
	<title>Zusammenfassung &amp; Ausblick</title>
	<para>
		Dieses Kapitel enthält eine kurze Komplexitätsanlyse des Programmcodes, den Ausblick auf weitere Versionen und das Schlusswort.
	</para>
	<section>
		<title>Quellcode Metriken</title>
		<para>
			In diesem Kapitel wird der Umfang von VIDIS
			mit Hilfe von Metriken (Siehe: <xref linkend="related.devtools.metrics" />)
			analysiert.
		</para>
		<variablelist>
			<varlistentry>
				<term>LOC (Lines of code)</term>
				<listitem>
					<para>
					VIDIS beinhaltet insgesamt 24359 Zeilen Programmcode.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>LOC in Methoden</term>
				<listitem>
					<para>
					Eine Methode ist durchschnittlich 5,83 Zeilen Programmiercode lang.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Klassen</term>
				<listitem>
					<para>
					VIDIS umfasst insgesamt mehr als 200 Klassen in mehr als 50 Paketen
					und rund 1400 Methoden. Von diesen Methoden
					sind rund 100 statisch. Weiters gibt es rund 170 Konstanten.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>NCSS</term>
				<listitem>
					<para>
					Insgesamt besteht VIDIS aus 11994 nicht kommentierten
					Zeilen Code. Quelle dieser Daten ist das Metrik Programm
					JavaNCSS (<xref linkend="web_javancss" />).
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section>
		<title>Ausblick</title>
		<para>
			Im Konzept VIDIS wurden einige wichtige und interessante
			Punkte berücksichtigt, jedoch konnten nicht alle im Rahmen
			einer Bakkalaureatsarbeit umgesetzt werden.
			Deshalb werden diese im Folgenden als Ausblick auf mögliche Erweiterungen
			von VIDIS präsentiert.
		</para>
		<variablelist>
			<varlistentry>
				<term>Serialisierung von <classname>SimulatorData</classname></term>
				<listitem>
					<para>
						Die interne Datenstruktur des Simulators implementiert
						das Interface <interfacename>Serializable</interfacename> und
						sollte somit serialisierbar sein. Damit wäre es möglich den
						Status des Simulators an einem interessanten Simulationszeitpunkt
						abzuspeichern und auf entfernten Rechnern zu starten. Auch
						zum Zwecke von Präsentationen wäre dies sehr sinnvoll.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Aufnehmen und Abspielen einer Simulation</term>
				<listitem>
					<para>
						Eine der ersten Ideen war, dass eine Simulation
						beständig beobachtet und jeder Simulationsschritt
						protokolliert und exportierbar sein sollte. Somit
						könnte man eine Simulation starten, den Verlauf der 
						Simulation aufnehmen und zu Präsentationszwecken
						abspielen.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry xml:id="conclusions.futurework.linkbandwidth">
				<term>Bandbreite für Links</term>
				<listitem>
					<para>
						In VIDIS gibt es keine native Unterstützung zur Simulation
						einer Bandbreite. Es ist jedoch möglich diese Funktionalität
						zu simulieren indem ein
						Paket selbst seine Größe kennt und ein Link nur eine
						gewisse Bandbreite 
						<inlinemediaobject>
							<imageobject>
								<imagedata format="mathml" fileref="pak.mml" />
					<!--				<math:math>
										<math:mfrac>
											<math:mi math:fontstyle="italic">Paketgröße</math:mi>
											<math:mi math:fontstyle="italic">Simulationsschritte</math:mi>
										</math:mfrac>
									</math:math>
								</imagedata> -->
							</imageobject>
						</inlinemediaobject>

<!--
<literal><superscript>Paketgröße</superscript>/<subscript>Simulationsschritte</subscript></literal>
-->
						überträgt. Da ein Simulator Link die Funktionalität der 
						Übertragung von Paketen implementiert, muss die Integration 
						einer Bandbreite in die Simulatorklasse <classname>SimLink</classname>
						implementiert werden.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section>
		<title>Schlusswort</title>
		<para>
			Das Projekt war deutlich zeitintensiver als angenommen. Das 3D Framework nachträglich austauschen war zeitlich teuer, aber notwendig.
			Es ist schwer Eventualitäten, wie den Austausch einens Frameworks im Vorfeld abzuschätzen.
			Wir haben im Laufe des Projekts sehr viel Code geschrieben und 
			haben so viel Erfahrung mit den verwendeten Entwicklungsumgebungen und
			Frameworks gesammelt. Dabei haben wir unter anderem auch Probleme
			in Implementierungen von Java, JOGL, Java3D, Eclipse, FOP und vielen
			mehr entdeckt. Es war ein arbeitsintensives, aber lehrreiches Projekt und
			wir möchten an dieser Stelle unserem Betreuer Max Berger für seine Unterstützung danken.
		</para>
	</section>
</chapter>
