<?xml version='1.0' encoding='UTF-8'?>

<refentry version="1.0" xml:id="CLASS-252" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" xreflabel="vidis.util.graphs.graph.TreeImpl">
  <indexterm><primary>Classes</primary><secondary>TreeImpl</secondary></indexterm>
  <indexterm><primary>TreeImpl</primary></indexterm>
  <refentryinfo>
    <date>2008-12-16</date>
  </refentryinfo>
  <refmeta>
    <manvolnum>3</manvolnum>
    <refmiscinfo class="source">vidis.util.graphs.graph.TreeImpl</refmiscinfo>
    <refmiscinfo class="version">1.0</refmiscinfo>
    <refmiscinfo class="manual">dbdoclet reference handbook</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>Class TreeImpl</refname>
    <refpurpose>An implementation of a <literal>Tree</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv><classsynopsis class="class" language="java">
      <ooclass>
        <modifier>public</modifier>
        <modifier>class</modifier>
        <classname>TreeImpl</classname>
      </ooclass>
      <ooclass>
        <classname>GraphImpl</classname>
      </ooclass>
      <oointerface>
        <interfacename>Tree</interfacename>
      </oointerface>
      <classsynopsisinfo role="comment">// Public Constructors</classsynopsisinfo>
      <constructorsynopsis language="java">
        <modifier>public</modifier>
        <methodname>TreeImpl</methodname>
        <methodparam><type>boolean</type><parameter>isDirected</parameter></methodparam>
      </constructorsynopsis>
      <classsynopsisinfo role="comment">// Public Methods</classsynopsisinfo>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>void</type>
        <methodname>addEdge</methodname>
        <methodparam><type>Edge</type><parameter>edge</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Edge</type>
        <methodname>addEdge</methodname>
        <methodparam><type>Vertex</type><parameter>v1</parameter></methodparam>
        <methodparam><type>Vertex</type><parameter>v2</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Edge</type>
        <methodname>addNode</methodname>
        <methodparam><type>Vertex</type><parameter>parent</parameter></methodparam>
        <methodparam><type>Vertex</type><parameter>childNode</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>List</type>
        <methodname>getChildren</methodname>
        <methodparam><type>Vertex</type><parameter>vertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>int</type>
        <methodname>getDepth</methodname>
        <methodparam><type>Vertex</type><parameter>node</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>int</type>
        <methodname>getHeight</methodname>
        <void/>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>List</type>
        <methodname>getLeaves</methodname>
        <void/>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Vertex</type>
        <methodname>getParent</methodname>
        <methodparam><type>Vertex</type><parameter>vertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Vertex</type>
        <methodname>getRoot</methodname>
        <void/>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Tree</type>
        <methodname>getSubTree</methodname>
        <methodparam><type>Vertex</type><parameter>subTreeRootVertex</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>boolean</type>
        <methodname>isLeaf</methodname>
        <methodparam><type>Vertex</type><parameter>vertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>boolean</type>
        <methodname>isPath</methodname>
        <methodparam><type>Vertex</type><parameter>v1</parameter></methodparam>
        <methodparam><type>Vertex</type><parameter>v2</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>void</type>
        <methodname>remove</methodname>
        <methodparam><type>Vertex</type><parameter>v</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>void</type>
        <methodname>setRoot</methodname>
        <methodparam><type>Vertex</type><parameter>rootVertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
    </classsynopsis>
<para><emphasis role="bold">Methods inherited from vidis.util.graphs.graph.GraphImpl</emphasis>: <simplelist type="inline"><member><link linkend="METHOD-243-6"><literal>add</literal></link></member><member><link linkend="METHOD-243-10"><literal>addEdge</literal></link></member><member><link linkend="METHOD-243-3"><literal>cloneVertices</literal></link></member><member><link linkend="METHOD-243-8"><literal>createEdge</literal></link></member><member><link linkend="METHOD-243-20"><literal>getAdjacentVertices</literal></link></member><member><link linkend="METHOD-243-5"><literal>getAllEdges</literal></link></member><member><link linkend="METHOD-243-21"><literal>getDegree</literal></link></member><member><link linkend="METHOD-243-4"><literal>getEdges</literal></link></member><member><link linkend="METHOD-243-17"><literal>getIncomingAdjacentVertices</literal></link></member><member><link linkend="METHOD-243-18"><literal>getOutgoingAdjacentVertices</literal></link></member><member><link linkend="METHOD-243-14"><literal>getVertices</literal></link></member><member><link linkend="METHOD-243-13"><literal>getVerticesCount</literal></link></member><member><link linkend="METHOD-243-2"><literal>getVerticesIterator</literal></link></member><member><link linkend="METHOD-243-7"><literal>haveCommonEdge</literal></link></member><member><link linkend="METHOD-243-1"><literal>isDirected</literal></link></member><member><link linkend="METHOD-243-24"><literal>isPath</literal></link></member><member><link linkend="CLASS-243"><literal>remove</literal></link></member><member><link linkend="METHOD-243-11"><literal>removeEdge</literal></link></member><member><link linkend="METHOD-243-12"><literal>removeEdges</literal></link></member><member><link linkend="METHOD-243-23"><literal>toString</literal></link></member></simplelist></para><para><emphasis role="bold">Methods inherited from java.lang.Object</emphasis>: <simplelist type="inline"><member><varname>equals</varname></member><member><varname>getClass</varname></member><member><varname>hashCode</varname></member><member><varname>notify</varname></member><member><varname>notifyAll</varname></member><member><varname>wait</varname></member></simplelist></para></refsynopsisdiv>
  <refsect1>
    <title>Inheritance Path</title>
    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="figures/vidis/util/graphs/graph/TreeImpl/ClassDiagram.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </informalfigure>
  </refsect1>
  <refsect1>
    <title>Description</title>
    <para>An implementation of a <literal>Tree</literal>. This implementation is a free tree and allows zero, one or more child nodes for each node. A free tree is a tree whereby any of the nodes can be a root node. By defauly, the first node added when the tree is empty is the root node. </para>
    <para> Directions of <literal>Edge</literal>s in tree are generally ignored. Directionality is basically implied when specifying the root of a <literal>Tree</literal>, where such operation requires it. </para>
    <para> A <literal>Tree</literal> does not allow cycle paths. So any attempts to create a cycle will thrown a <literal>CycleException</literal>.</para>
  </refsect1>
  <refsect1>
    <title>Constructors</title>
    <refsect2 xml:id="CONSTRUCTOR-252-1" xreflabel="TreeImpl(boolean)">
      <title>TreeImpl(boolean)</title>
      <indexterm><primary>TreeImpl</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>TreeImpl</secondary></indexterm>
      <constructorsynopsis language="java">
        <modifier>public</modifier>
        <methodname>TreeImpl</methodname>
        <methodparam><type>boolean</type><parameter>isDirected</parameter></methodparam>
      </constructorsynopsis>
      <para>Creates an instance of a <literal>TreeImpl</literal></para>
    </refsect2>
  </refsect1>
  <refsect1>
    <title>Methods</title>
    <refsect2 xml:id="METHOD-252-12" xreflabel="addEdge(vidis.util.graphs.graph.Edge)">
      <title>addEdge(Edge)</title>
      <indexterm><primary>addEdge</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>addEdge</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>void</type>
        <methodname>addEdge</methodname>
        <methodparam><type>Edge</type><parameter>edge</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <para>Adds an Edge into the Tree. This will only add the Edge if there is currently no path between the two Vertices indicated in the Edge. If there is, a <literal>CycleException</literal> is thrown.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-13" xreflabel="addEdge(vidis.util.graphs.graph.Vertex, vidis.util.graphs.graph.Vertex)">
      <title>addEdge(Vertex, Vertex)</title>
      <indexterm><primary>addEdge</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>addEdge</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Edge</type>
        <methodname>addEdge</methodname>
        <methodparam><type>Vertex</type><parameter>v1</parameter></methodparam>
        <methodparam><type>Vertex</type><parameter>v2</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <para>Adds an Edge into the Tree by creating a new instance of <literal>EdgeImpl</literal>. This will only add the Edge if there is currently no path between the two Vertices indicated in the Edge. If there is, a <literal>CycleException</literal> is thrown.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-11" xreflabel="addNode(vidis.util.graphs.graph.Vertex, vidis.util.graphs.graph.Vertex)">
      <title>addNode(Vertex, Vertex)</title>
      <indexterm><primary>addNode</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>addNode</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Edge</type>
        <methodname>addNode</methodname>
        <methodparam><type>Vertex</type><parameter>parent</parameter></methodparam>
        <methodparam><type>Vertex</type><parameter>childNode</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-9">addNode</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Adds a node to the <literal>Tree</literal>. The parent node must already be existing in the <literal>Tree</literal> before the child node can be added. To add the root node, specify null as the parent. </para>
      <para> Note that the parent and child relativity is dependent for whatever is the current root node of the <literal>Tree</literal>. Hence, if childNode later on becomes root via setRoot(), then the parent actually becomes the child of childNode. </para>
      <para> This method should be used instead of the superclass&apos; add() methods.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-5" xreflabel="getChildren(vidis.util.graphs.graph.Vertex)">
      <title>getChildren(Vertex)</title>
      <indexterm><primary>getChildren</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getChildren</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>List</type>
        <methodname>getChildren</methodname>
        <methodparam><type>Vertex</type><parameter>vertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-4">getChildren</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns the child nodes of the node specified by the argument.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-7" xreflabel="getDepth(vidis.util.graphs.graph.Vertex)">
      <title>getDepth(Vertex)</title>
      <indexterm><primary>getDepth</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getDepth</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>int</type>
        <methodname>getDepth</methodname>
        <methodparam><type>Vertex</type><parameter>node</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-6">getDepth</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns the depth of the node in the <literal>Tree</literal>.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-9" xreflabel="getHeight()">
      <title>getHeight()</title>
      <indexterm><primary>getHeight</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getHeight</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>int</type>
        <methodname>getHeight</methodname>
        <void/>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-8">getHeight</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns the height of the <literal>Tree</literal>.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-8" xreflabel="getLeaves()">
      <title>getLeaves()</title>
      <indexterm><primary>getLeaves</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getLeaves</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>List</type>
        <methodname>getLeaves</methodname>
        <void/>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-7">getLeaves</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns a <literal>List</literal> of the leaves of ths <literal>Tree</literal>.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-4" xreflabel="getParent(vidis.util.graphs.graph.Vertex)">
      <title>getParent(Vertex)</title>
      <indexterm><primary>getParent</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getParent</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Vertex</type>
        <methodname>getParent</methodname>
        <methodparam><type>Vertex</type><parameter>vertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-3">getParent</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns the parent node of the node specified by the argument.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-2" xreflabel="getRoot()">
      <title>getRoot()</title>
      <indexterm><primary>getRoot</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getRoot</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Vertex</type>
        <methodname>getRoot</methodname>
        <void/>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-2">getRoot</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns the current root of the <literal>Tree</literal>. It is possible that this method will return null if the <literal>Tree</literal> is empty.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-6" xreflabel="getSubTree(vidis.util.graphs.graph.Vertex)">
      <title>getSubTree(Vertex)</title>
      <indexterm><primary>getSubTree</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>getSubTree</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>Tree</type>
        <methodname>getSubTree</methodname>
        <methodparam><type>Vertex</type><parameter>subTreeRootVertex</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-5">getSubTree</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns a new instance of a <literal>Tree</literal> that is rooted from the specified node. This method does not alter the <literal>Tree</literal> itself. </para>
      <para> Although a new <literal>Tree</literal> is returned, the nodes and edges within the new <literal>Tree</literal> are the same instances as those of the <literal>Tree</literal> from where it was taken from.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-3" xreflabel="isLeaf(vidis.util.graphs.graph.Vertex)">
      <title>isLeaf(Vertex)</title>
      <indexterm><primary>isLeaf</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>isLeaf</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>boolean</type>
        <methodname>isLeaf</methodname>
        <methodparam><type>Vertex</type><parameter>vertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-10">isLeaf</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Returns true if the specified node is a leaf.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-10" xreflabel="isPath(vidis.util.graphs.graph.Vertex, vidis.util.graphs.graph.Vertex)">
      <title>isPath(Vertex, Vertex)</title>
      <indexterm><primary>isPath</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>isPath</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>boolean</type>
        <methodname>isPath</methodname>
        <methodparam><type>Vertex</type><parameter>v1</parameter></methodparam>
        <methodparam><type>Vertex</type><parameter>v2</parameter></methodparam>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-11">isPath</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Determines if there is a path from Vertex fromVertex to Vertex toVertex. </para>
      <para> Directionality of Edges along the path are ignored. Therefore, <literal>isPath( a, b )</literal> is the same as <literal>isPath( b, a )</literal>. </para>
      <para> If either one of the vertices are not in the <literal>Tree</literal>, the result will be false.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-14" xreflabel="remove(vidis.util.graphs.graph.Vertex)">
      <title>remove(Vertex)</title>
      <indexterm><primary>remove</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>remove</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>void</type>
        <methodname>remove</methodname>
        <methodparam><type>Vertex</type><parameter>v</parameter></methodparam>
        <exceptionname>Exception</exceptionname>
      </methodsynopsis>
      <para>Removes a leaf node from a <literal>Tree</literal>. This method will return an <literal>IllegalTreeException</literal> if you attempt to delete a <literal>Vertex</literal> that is not a leaf node. </para>
      <para> In this method, a leaf node is defined as a <literal>Vertex</literal> that has zero or one indicent <literal>Edge</literal>.</para>
    </refsect2>
    <refsect2 xml:id="METHOD-252-1" xreflabel="setRoot(vidis.util.graphs.graph.Vertex)">
      <title>setRoot(Vertex)</title>
      <indexterm><primary>setRoot</primary></indexterm>
      <indexterm><primary>Methods</primary><secondary>setRoot</secondary></indexterm>
      <methodsynopsis language="java">
        <modifier>public</modifier>
        <type>void</type>
        <methodname>setRoot</methodname>
        <methodparam><type>Vertex</type><parameter>rootVertex</parameter></methodparam>
        <exceptionname>GraphException</exceptionname>
      </methodsynopsis>
      <para><emphasis role="bold">Specified by: </emphasis>Method <link linkend="METHOD-251-1">setRoot</link> in interface <link linkend="CLASS-251">Tree</link></para>
      <para>Sets the root of the <literal>Tree</literal>. The <literal>Vertex</literal> specified must already be in the <literal>Tree</literal>. Otherwise, a <literal>NoSuchVertexException</literal> is returned.</para>
    </refsect2>
  </refsect1>
</refentry>


