<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook" lang="de"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:mml="http://www.w3.org/1998/Math/MathML"
	xmlns:html="http://www.w3.org/1999/xhtml">

	<title>Visualisierungsframework für Konzepte
		der Verteilten Systeme</title>

	<info>
		<authorgroup>
			<author>
				<personname>
					<firstname>Dominik</firstname>
					<surname>Psenner</surname>
				</personname>
			</author>
			<author>
				<personname>
					<firstname>Christoph</firstname>
					<surname>Caks</surname>
				</personname>
			</author>
		</authorgroup>
		<abstract>
			<para>
				Lehrveranstaltungen über Verteilte Systeme beschäftigten sich vornehmlich mit verteilten Algorithmen. 
				Diese werden meist als Pseudo-Code dargestellt und Studenten haben oft Probleme sich darunter etwas vorszustellen. 
				Es soll eine Möglichkeit geschaffen werden diese Algorithmen anschaulich, optisch ansprechend und interaktiv aufzubereiten.
			</para><para>
				Ziel dieser Arbeit ist es ein Framework zu konzipieren, welches diese Darstellung ermöglicht.
				Es muss eine API entworfen werden, die es ermöglicht, Verteilte Algorithmen zu implementieren.
				Das Framework muss diese Verteilten Algorithmen auf einem Rechner simulieren können, optisch ansprechend darstellen 
				und dem Benutzer eine Möglichkeit bieten, das simulierte System zu beeinflussen.
				Außerdem sollen bereits einige verteilte Algorithmen implementiert werden.
			</para><para>
				Im Zuge dieser Arbeit wurden dieses Framework und ausgewählte verteilte Algorithmen implementiert. Dabei kamen Entwicklungswerkzeuge wie
				Eclipse und Netbeans zum Einsatz und es wurden Technologien wie Java, OpenGL, JOGL, Java Webstart und programmierbare Grafikhardware (Shader) eingesetzt.
				Die Arbeit verschafft einen Überblick über das Design und die Implementation dieses Frameworks.
				Das Framework ist jetzt voll funktionsfähig und wird für Lehrveranstaltung der verteilten Systeme verwendet.
			</para>
		</abstract>
			<keywordset>
				<keyword>Java</keyword>
				<keyword>Ant</keyword>
				<keyword>Java Web Start</keyword>
				<keyword>OpenGL</keyword>
				<keyword>Java3D</keyword>
				<keyword>JOGL</keyword>
				<keyword>LWJGL</keyword>
				<keyword>Eclipse</keyword>
				<keyword>Netbeans</keyword>
				<keyword>Echo Algorithmus</keyword>
				<keyword>Byzantinische Generäle</keyword>
				<keyword>Bully Election Algorithmus</keyword>
				<keyword>Vector Clock Algorithmus</keyword>
			</keywordset>
	</info>

	<xi:include href="preface.xml" />
	<xi:include href="related.xml" />
	<xi:include href="design.xml" />
	<xi:include href="implementation.xml" />
	<xi:include href="conclusions.xml" />
	<xi:include href="biblio.xml" />
	<appendix xml:id="appendix_msimdtd">
		<title>MSIM DTD Definition</title>
		<programlisting><![CDATA[<!ELEMENT class ( #PCDATA ) >

<!ELEMENT connection ( nodeA, nodeB, link ) >

<!ELEMENT connections ( connection* ) >

<!ELEMENT delay ( #PCDATA ) >

<!ELEMENT description ( #PCDATA ) >

<!ELEMENT id ( #PCDATA ) >

<!ELEMENT link ( id, class, delay, variables* )* >

<!ELEMENT module ( description?, package, nodeDensity?, objects?, connections? ) >

<!ELEMENT node ( id, class, variables? ) >

<!ELEMENT nodeA ( #PCDATA ) >

<!ELEMENT nodeB ( #PCDATA ) >

<!ELEMENT nodeDensity ( #PCDATA ) >

<!ELEMENT objects ( node*, link* ) >

<!ELEMENT package ( #PCDATA ) >

<!ELEMENT variables ( variable* ) >

<!ELEMENT variable (id, value) >

<!ELEMENT value ( #PCDATA ) >]]></programlisting>
	</appendix>
<!-- <xi:include href="javadoc.xml" /> -->
<!--
	<xi:include href="glossary.xml" />	
-->
</book>
